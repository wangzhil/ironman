/**
 * 什么是单例：简单点讲，就是该类对象无论怎么创建都只会一个实例对象存在。
 * 如何做： 思想： 私有化构造器(控制外部生成，生成权交给自己)，提供静态方法
 *      获取有且仅有一个对象实例(按照自己的思路来提供)
 *
 * 单例模式： 主要分两类， 饿汉式  和 懒汉式
 * 饿汉式：类加载就会导致该单实例对象被创建
 * 懒汉式：类加载不会导致该单实例对象被创建，而是在首次使用该对象的时候才会创建
 *
 * 总结：
 * （1）单例模式常见的写法有两种：懒汉式、饿汉式
 * （2）懒汉式：在需要用到对象时才实例化对象，正确的实现方式是：Double Check + Lock，解决了并发安全和性能低下问题
 * （3）饿汉式：在类加载时已经创建好该单例对象，在获取单例对象时直接返回对象即可，不会存在并发安全和性能问题。
 *          但是如果对象占用资源很大，创建了却长时间不被使用，很浪费资源。
 * （4）***** 在开发中如果对内存要求非常高，那么使用懒汉式写法，可以在特定时候才创建该对象；*****
 * （5）***** 如果对内存要求不高使用饿汉式写法，因为简单不易出错，且没有任何并发安全和性能问题 *****
 * （6）为了防止多线程环境下，因为指令重排序导致变量报NPE，需要在单例对象上添加 volatile 关键字防止指令重排序
 * （7）***** 最优雅的实现方式是使用枚举，其代码精简，没有线程安全问题，且 Enum 类内部防止反射和反序列化时破坏单例。 *****
 *
 * 源码：  Runtime
 *
 * @author: wangzhilei
 * @version: 1.0.0
 * @date: 2021/9/19 23:14
 */
package com.wzl.share.singleton;
